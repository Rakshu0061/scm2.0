spring.application.name=scm2.0
server.port=8081
# mysql database configuration
spring.datasource.url=jdbc:mysql://localhost:3306/scm20
spring.datasource.username=root
spring.datasource.password=root
# jpa configuration
spring.jpa.show-sql=true
# for creating schemas and tables
spring.jpa.hibernate.ddl-auto=update
 #npm init -y
 spring.thymeleaf.prefix=classpath:/templates/
spring.thymeleaf.suffix=.html
spring.thymeleaf.mode=HTML5
spring.thymeleaf.encoding=UTF-8
spring.thymeleaf.cache=false

#spring security configuration
spring.security.user.name=rakshanda
spring.security.user.password=rakshanda

# outh2 client configurations

#google configure
#spring.security.oauth2.client.registration.google.google.client-name=google
#spring.security.oauth2.client.registration.google.google.client-id=881508422834-7a762g5j7rqgo3foq8mg81ch8999rmc5.apps.googleusercontent.com
#spring.security.oauth2.client.registration.google.google.client-secret=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
#spring.security.oauth2.client.registration.google.google.scope=email,profile
#spring.security.oauth2.client.registration.google.redirect-uri=http://localhost:8081/login/oauth2/code/google



spring.security.oauth2.client.registration.google.client-name=google
spring.security.oauth2.client.registration.google.client-id=881508422834-7a762g5j7rqgo3foq8mg81ch8999rmc5.apps.googleusercontent.com
spring.security.oauth2.client.registration.google.client-secret=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
spring.security.oauth2.client.registration.google.scope=email,profile
spring.security.oauth2.client.registration.google.redirect-uri= http://localhost:8081/login/oauth2/code/google
spring.security.oauth2.client.registration.google.authorization-grant-type=authorization_code
spring.security.oauth2.client.provider.google.authorization-uri=https://accounts.google.com/o/oauth2/auth
spring.security.oauth2.client.provider.google.token-uri=https://oauth2.googleapis.com/token
spring.security.oauth2.client.provider.google.user-info-uri=https://www.googleapis.com/oauth2/v3/userinfo
spring.security.oauth2.client.provider.google.user-name-attribute=sub



# GitHub OAuth2 Configuration
spring.security.oauth2.client.registration.github.client-name=github
spring.security.oauth2.client.registration.github.client-id= Iv23liLaZmFFY9lCFt3y
spring.security.oauth2.client.registration.github.client-secret=30971b8d5bfe4661422d15cf8a11405a7838fdad
spring.security.oauth2.client.registration.github.scope=read:user,user:email
spring.security.oauth2.client.registration.github.redirect-uri=http://localhost:8080/login/oauth2/code/github
spring.security.oauth2.client.registration.github.authorization-grant-type=authorization_code
spring.security.oauth2.client.provider.github.authorization-uri=https://github.com/login/oauth/authorize
spring.security.oauth2.client.provider.github.token-uri=https://github.com/login/oauth/access_token
spring.security.oauth2.client.provider.github.user-info-uri=https://api.github.com/user
spring.security.oauth2.client.provider.github.user-name-attribute=id




#cloudinary
cloudinary.cloud.name=durzheplg
cloudinary.api.key=548336112318968
cloudinary.api.secret=W-PKyl8L5haJvFDUe27-7qI6LD8

#file size
spring.servlet.multipart.max-file-size=-1
spring.servlet.multipart.max-request-size=-1